generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  name            String
  profilePicture  String?
  role            Role     @default(CUSTOMER)
  referralCode    String   @unique
  referredBy      String?
  pointsBalance   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organizedEvents Event[]
  transactions    Transaction[]
  reviews         Review[]
  pointsHistory   PointsHistory[]
  coupons         Coupon[]

  @@map("users")
}

model Event {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Int      // in IDR
  startDate     DateTime
  endDate       DateTime
  availableSeats Int
  totalSeats    Int
  location      String
  category      String
  imageUrl      String?
  organizerId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizer     User @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  reviews       Review[]
  vouchers      Voucher[]

  @@map("events")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  eventId       String
  ticketCount   Int
  totalAmount   Int               // in IDR
  pointsUsed    Int               @default(0)
  status        TransactionStatus @default(WAITING_PAYMENT)
  paymentProof  String?
  expiresAt     DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  vouchers TransactionVoucher[]
  coupons  TransactionCoupon[]

  @@map("transactions")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("reviews")
}

model Voucher {
  id          String   @id @default(cuid())
  eventId     String
  code        String   @unique
  discount    Int      // percentage or fixed amount
  discountType DiscountType @default(PERCENTAGE)
  maxUses     Int
  currentUses Int      @default(0)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactions TransactionVoucher[]

  @@map("vouchers")
}

model Coupon {
  id          String   @id @default(cuid())
  userId      String
  code        String   @unique
  discount    Int      // percentage or fixed amount
  discountType DiscountType @default(PERCENTAGE)
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions TransactionCoupon[]

  @@map("coupons")
}

model PointsHistory {
  id          String      @id @default(cuid())
  userId      String
  points      Int
  type        PointsType
  description String
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_history")
}

model TransactionVoucher {
  transactionId String
  voucherId     String

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  voucher     Voucher     @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  @@id([transactionId, voucherId])
  @@map("transaction_vouchers")
}

model TransactionCoupon {
  transactionId String
  couponId      String

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  coupon      Coupon      @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@id([transactionId, couponId])
  @@map("transaction_coupons")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  CONFIRMED
  REJECTED
  EXPIRED
  CANCELED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PointsType {
  EARNED
  USED
  EXPIRED
}